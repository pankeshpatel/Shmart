'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\react\\kickstart\\Shmart\\components\\RequestRow.js';


var RequestRow = function (_Component) {
  (0, _inherits3.default)(RequestRow, _Component);

  function RequestRow() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, RequestRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context.sent;
              _context.next = 6;
              return campaign.methods.approveRequest(_this.props.id).send({
                from: accounts[0]
              });

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.onFinalize = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context2.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context2.sent;
              _context2.next = 6;
              return campaign.methods.finalizeRequest(_this.props.id).send({
                from: accounts[0]
              });

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(RequestRow, [{
    key: 'render',
    value: function render() {
      var Row = _semanticUiReact.Table.Row,
          Cell = _semanticUiReact.Table.Cell;
      var _props = this.props,
          id = _props.id,
          request = _props.request,
          approversCount = _props.approversCount;

      var readyToFinalize = request.approvalCount > approversCount / 2;

      return _react2.default.createElement(Row, {
        disabled: request.complete,
        positive: readyToFinalize && !request.complete,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      }, _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, id), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }, request.description), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, _web2.default.utils.fromWei(request.value, 'ether')), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, request.recipient), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, request.approvalCount, '/', approversCount), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onApprove, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, 'Approve')), _react2.default.createElement(Cell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onFinalize, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Finalize')));
    }
  }]);

  return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIm9uQXBwcm92ZSIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcm9wcyIsImFkZHJlc3MiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiYXBwcm92ZVJlcXVlc3QiLCJpZCIsInNlbmQiLCJmcm9tIiwic3RvcCIsIm9uRmluYWxpemUiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImZpbmFsaXplUmVxdWVzdCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiUm93IiwiQ2VsbCIsIl9wcm9wcyIsInJlcXVlc3QiLCJhcHByb3ZlcnNDb3VudCIsInJlYWR5VG9GaW5hbGl6ZSIsImFwcHJvdmFsQ291bnQiLCJjcmVhdGVFbGVtZW50IiwiZGlzYWJsZWQiLCJjb21wbGV0ZSIsInBvc2l0aXZlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJkZXNjcmlwdGlvbiIsInV0aWxzIiwiZnJvbVdlaSIsInJlY2lwaWVudCIsImNvbG9yIiwiYmFzaWMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSkEsSUFBSUEsZUFBZSx5REFBbkI7OztBQU1BLElBQUlDLGFBQWEsVUFBVUMsVUFBVixFQUFzQjtBQUNyQyww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Q0VOLElBREYsRUFFRTtBQUNFVSxrQkFBVTtBQUNSQyxvQkFBVTNELFlBREY7QUFFUjRELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsY0FBS0UsS0FBTCxDQUFXQyxPQUFYLENBQW1CYixRQUFRTCxLQUEzQixFQUFrQyxPQUFsQyxDQVJGLENBOUJLLEVBd0NMLGdCQUFNUyxhQUFOLENBQ0VOLElBREYsRUFFRTtBQUNFVSxrQkFBVTtBQUNSQyxvQkFBVTNELFlBREY7QUFFUjRELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUVWLFFBQVFjLFNBUlYsQ0F4Q0ssRUFrREwsZ0JBQU1WLGFBQU4sQ0FDRU4sSUFERixFQUVFO0FBQ0VVLGtCQUFVO0FBQ1JDLG9CQUFVM0QsWUFERjtBQUVSNEQsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRVYsUUFBUUcsYUFSVixFQVNFLEdBVEYsRUFVRUYsY0FWRixDQWxESyxFQThETCxnQkFBTUcsYUFBTixDQUNFTixJQURGLEVBRUU7QUFDRVUsa0JBQVU7QUFDUkMsb0JBQVUzRCxZQURGO0FBRVI0RCxzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFVixRQUFRTSxRQUFSLEdBQW1CLElBQW5CLEdBQTBCLGdCQUFNRixhQUFOLDBCQUV4QixFQUFFVyxPQUFPLE9BQVQsRUFBa0JDLE9BQU8sSUFBekIsRUFBK0JDLFNBQVMsS0FBS2pELFNBQTdDLEVBQXdEd0MsVUFBVTtBQUM5REMsb0JBQVUzRCxZQURvRDtBQUU5RDRELHNCQUFZO0FBRmtEO0FBQWxFLE9BRndCLEVBT3hCLFNBUHdCLENBUjVCLENBOURLLEVBZ0ZMLGdCQUFNTixhQUFOLENBQ0VOLElBREYsRUFFRTtBQUNFVSxrQkFBVTtBQUNSQyxvQkFBVTNELFlBREY7QUFFUjRELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUVWLFFBQVFNLFFBQVIsR0FBbUIsSUFBbkIsR0FBMEIsZ0JBQU1GLGFBQU4sMEJBRXhCLEVBQUVXLE9BQU8sTUFBVCxFQUFpQkMsT0FBTyxJQUF4QixFQUE4QkMsU0FBUyxLQUFLNUIsVUFBNUMsRUFBd0RtQixVQUFVO0FBQzlEQyxvQkFBVTNELFlBRG9EO0FBRTlENEQsc0JBQVk7QUFGa0Q7QUFBbEUsT0FGd0IsRUFPeEIsVUFQd0IsQ0FSNUIsQ0FoRkssQ0FBUDtBQW1HRDtBQS9HdUIsR0FBRCxDQUF6Qjs7QUFrSEEsU0FBTzNELFVBQVA7QUFDRCxDQW5MZ0Isa0JBQWpCOztrQkFxTGVBLFUiLCJmaWxlIjoidW5rbm93biJ9