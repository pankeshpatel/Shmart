'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _registeration = require('../../ethereum/registeration');

var _registeration2 = _interopRequireDefault(_registeration);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\react\\kickstart\\Shmart\\pages\\records\\show.js?entry';

//import ContributeForm from '../../components/ContributeForm';


var RecordShow = function (_Component) {
  (0, _inherits3.default)(RecordShow, _Component);

  function RecordShow() {
    (0, _classCallCheck3.default)(this, RecordShow);

    return (0, _possibleConstructorReturn3.default)(this, (RecordShow.__proto__ || (0, _getPrototypeOf2.default)(RecordShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(RecordShow, [{
    key: 'renderRecords',
    value: function renderRecords() {
      var _props = this.props,
          address = _props.address,
          name = _props.name,
          id = _props.id,
          role = _props.role,
          orgType = _props.orgType,
          provider = _props.provider,
          walletBalance = _props.walletBalance,
          walletID = _props.walletID,
          smartRecord = _props.smartRecord;

      var items = [{
        header: address,
        meta: 'Address of Record in Blockchain',
        description: 'This is an address of Record in Blockchain',
        style: { overflowWrap: 'break-word' }
      }, {
        header: name,
        meta: 'Name of a person',
        description: 'This is a name of register, who record his/her information into portal',
        style: { overflowWrap: 'break-word' }
      }, {
        header: id,
        meta: 'id of a person',
        description: 'This is an id of a person',
        style: { overflowWrap: 'break-word' }
      }, {
        header: role,
        meta: 'role of a person',
        description: 'This is an role of a person',
        style: { overflowWrap: 'break-word' }
      }, {
        header: orgType,
        meta: 'Organization Type',
        description: 'It provides information about Organization Type',
        style: { overflowWrap: 'break-word' }
      }, {
        header: provider,
        meta: 'provider',
        description: 'It provides information about provider',
        style: { overflowWrap: 'break-word' }
      }, {
        header: orgType,
        meta: 'Organization Type',
        description: 'It provides information about Organization Type',
        style: { overflowWrap: 'break-word' }
      }, {
        header: walletBalance,
        meta: 'Wallet Balance',
        description: 'It is wallet balance.',
        style: { overflowWrap: 'break-word' }
      }, {
        header: smartRecord,
        meta: 'SHMART record',
        description: 'IoT Device data',
        style: { overflowWrap: 'break-word' }
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 108
        }
      });
    }

    // render (){
    //   return (
    //     <h3>Record Show</h3>
    //   );
    // }

  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120
        }
      }, 'Record Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 122
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 123
        }
      }, this.renderRecords()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 124
        }
      }))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var record, summary;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                record = (0, _registeration2.default)(props.query.address);
                _context.next = 3;
                return record.methods.getSummary().call();

              case 3:
                summary = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  name: summary[0],
                  id: summary[1],
                  role: summary[2],
                  orgType: summary[3],
                  provider: summary[4],
                  walletBalance: summary[5],
                  walletID: summary[6],
                  smartRecord: summary[7]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return RecordShow;
}(_react.Component);

exports.default = RecordShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVjb3JkU2hvdyIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUmVjb3JkcyIsIl9wcm9wcyIsInByb3BzIiwiYWRkcmVzcyIsIm5hbWUiLCJpZCIsInJvbGUiLCJvcmdUeXBlIiwicHJvdmlkZXIiLCJ3YWxsZXRCYWxhbmNlIiwid2FsbGV0SUQiLCJzbWFydFJlY29yZCIsIml0ZW1zIiwiaGVhZGVyIiwibWV0YSIsImRlc2NyaXB0aW9uIiwic3R5bGUiLCJvdmVyZmxvd1dyYXAiLCJjcmVhdGVFbGVtZW50IiwiR3JvdXAiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwicmVjb3JkIiwic3VtbWFyeSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRTdW1tYXJ5IiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQU5BLElBQUlBLGVBQWUsNkRBQW5COztBQU9BOzs7QUFHQSxJQUFJQyxhQUFhLFVBQVVDLFVBQVYsRUFBc0I7QUFDckMsMEJBQVVELFVBQVYsRUFBc0JDLFVBQXRCOztBQUVBLFdBQVNELFVBQVQsR0FBc0I7QUFDcEIsa0NBQWdCLElBQWhCLEVBQXNCQSxVQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxXQUFXRSxTQUFYLElBQXdCLDhCQUF1QkYsVUFBdkIsQ0FBekIsRUFBNkRHLEtBQTdELENBQW1FLElBQW5FLEVBQXlFQyxTQUF6RSxDQUFqQyxDQUFQO0FBQ0Q7O0FBRUQsNkJBQWFKLFVBQWIsRUFBeUIsQ0FBQztBQUN4QkssU0FBSyxlQURtQjtBQUV4QkMsV0FBTyxTQUFTQyxhQUFULEdBQXlCO0FBQzlCLFVBQUlDLFNBQVMsS0FBS0MsS0FBbEI7QUFBQSxVQUNJQyxVQUFVRixPQUFPRSxPQURyQjtBQUFBLFVBRUlDLE9BQU9ILE9BQU9HLElBRmxCO0FBQUEsVUFHSUMsS0FBS0osT0FBT0ksRUFIaEI7QUFBQSxVQUlJQyxPQUFPTCxPQUFPSyxJQUpsQjtBQUFBLFVBS0lDLFVBQVVOLE9BQU9NLE9BTHJCO0FBQUEsVUFNSUMsV0FBV1AsT0FBT08sUUFOdEI7QUFBQSxVQU9JQyxnQkFBZ0JSLE9BQU9RLGFBUDNCO0FBQUEsVUFRSUMsV0FBV1QsT0FBT1MsUUFSdEI7QUFBQSxVQVNJQyxjQUFjVixPQUFPVSxXQVR6Qjs7QUFZQSxVQUFJQyxRQUFRLENBQUM7QUFDWEMsZ0JBQVFWLE9BREc7QUFFWFcsY0FBTSxpQ0FGSztBQUdYQyxxQkFBYSw0Q0FIRjtBQUlYQyxlQUFPLEVBQUVDLGNBQWMsWUFBaEI7QUFKSSxPQUFELEVBS1Q7QUFDREosZ0JBQVFULElBRFA7QUFFRFUsY0FBTSxrQkFGTDtBQUdEQyxxQkFBYSx3RUFIWjtBQUlEQyxlQUFPLEVBQUVDLGNBQWMsWUFBaEI7QUFKTixPQUxTLEVBVVQ7QUFDREosZ0JBQVFSLEVBRFA7QUFFRFMsY0FBTSxnQkFGTDtBQUdEQyxxQkFBYSwyQkFIWjtBQUlEQyxlQUFPLEVBQUVDLGNBQWMsWUFBaEI7QUFKTixPQVZTLEVBZVQ7QUFDREosZ0JBQVFQLElBRFA7QUFFRFEsY0FBTSxrQkFGTDtBQUdEQyxxQkFBYSw2QkFIWjtBQUlEQyxlQUFPLEVBQUVDLGNBQWMsWUFBaEI7QUFKTixPQWZTLEVBb0JUO0FBQ0RKLGdCQUFRTixPQURQO0FBRURPLGNBQU0sbUJBRkw7QUFHREMscUJBQWEsaURBSFo7QUFJREMsZUFBTyxFQUFFQyxjQUFjLFlBQWhCO0FBSk4sT0FwQlMsRUF5QlQ7QUFDREosZ0JBQVFMLFFBRFA7QUFFRE0sY0FBTSxVQUZMO0FBR0RDLHFCQUFhLHdDQUhaO0FBSURDLGVBQU8sRUFBRUMsY0FBYyxZQUFoQjtBQUpOLE9BekJTLEVBOEJUO0FBQ0RKLGdCQUFRTixPQURQO0FBRURPLGNBQU0sbUJBRkw7QUFHREMscUJBQWEsaURBSFo7QUFJREMsZUFBTyxFQUFFQyxjQUFjLFlBQWhCO0FBSk4sT0E5QlMsRUFtQ1Q7QUFDREosZ0JBQVFKLGFBRFA7QUFFREssY0FBTSxnQkFGTDtBQUdEQyxxQkFBYSx1QkFIWjtBQUlEQyxlQUFPLEVBQUVDLGNBQWMsWUFBaEI7QUFKTixPQW5DUyxFQXdDVDtBQUNESixnQkFBUUYsV0FEUDtBQUVERyxjQUFNLGVBRkw7QUFHREMscUJBQWEsaUJBSFo7QUFJREMsZUFBTyxFQUFFQyxjQUFjLFlBQWhCO0FBSk4sT0F4Q1MsQ0FBWjs7QUErQ0EsYUFBTyxnQkFBTUMsYUFBTixDQUFvQixzQkFBS0MsS0FBekIsRUFBZ0MsRUFBRVAsT0FBT0EsS0FBVCxFQUFnQlEsVUFBVTtBQUM3REMsb0JBQVU3QixZQURtRDtBQUU3RDhCLHNCQUFZO0FBRmlEO0FBQTFCLE9BQWhDLENBQVA7QUFLRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQXpFd0IsR0FBRCxFQTJFdEI7QUFDRHhCLFNBQUssUUFESjtBQUVEQyxXQUFPLFNBQVN3QixNQUFULEdBQWtCO0FBQ3ZCLGFBQU8sZ0JBQU1MLGFBQU4sbUJBRUw7QUFDRUUsa0JBQVU7QUFDUkMsb0JBQVU3QixZQURGO0FBRVI4QixzQkFBWTtBQUZKO0FBRFosT0FGSyxFQVFMLGdCQUFNSixhQUFOLENBQ0UsSUFERixFQUVFO0FBQ0VFLGtCQUFVO0FBQ1JDLG9CQUFVN0IsWUFERjtBQUVSOEIsc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxhQVJGLENBUkssRUFrQkwsZ0JBQU1KLGFBQU4sd0JBRUU7QUFDRUUsa0JBQVU7QUFDUkMsb0JBQVU3QixZQURGO0FBRVI4QixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQUFNSixhQUFOLENBQ0Usc0JBQUtNLEdBRFAsRUFFRTtBQUNFSixrQkFBVTtBQUNSQyxvQkFBVTdCLFlBREY7QUFFUjhCLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1KLGFBQU4sQ0FDRSxzQkFBS08sTUFEUCxFQUVFLEVBQUVDLE9BQU8sRUFBVCxFQUFhTixVQUFVO0FBQ25CQyxvQkFBVTdCLFlBRFM7QUFFbkI4QixzQkFBWTtBQUZPO0FBQXZCLE9BRkYsRUFPRSxLQUFLdEIsYUFBTCxFQVBGLENBUkYsRUFpQkUsZ0JBQU1rQixhQUFOLENBQW9CLHNCQUFLTyxNQUF6QixFQUFpQyxFQUFFQyxPQUFPLENBQVQsRUFBWU4sVUFBVTtBQUNuREMsb0JBQVU3QixZQUR5QztBQUVuRDhCLHNCQUFZO0FBRnVDO0FBQXRCLE9BQWpDLENBakJGLENBUkYsQ0FsQkssQ0FBUDtBQW1ERDtBQXREQSxHQTNFc0IsQ0FBekIsRUFrSUksQ0FBQztBQUNIeEIsU0FBSyxpQkFERjtBQUVIQyxXQUFPLFlBQVk7QUFDakIsVUFBSTRCLE9BQU8saUNBQW1CLGFBQWEsc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxPQUFULENBQWlCM0IsS0FBakIsRUFBd0I7QUFDMUYsWUFBSTRCLE1BQUosRUFBWUMsT0FBWjtBQUNBLGVBQU8sc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUMxRCxpQkFBTyxDQUFQLEVBQVU7QUFDUixvQkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDRSxtQkFBSyxDQUFMO0FBQ0VOLHlCQUFTLDZCQUFjNUIsTUFBTW1DLEtBQU4sQ0FBWWxDLE9BQTFCLENBQVQ7QUFDQStCLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU9OLE9BQU9RLE9BQVAsQ0FBZUMsVUFBZixHQUE0QkMsSUFBNUIsRUFBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0VULDBCQUFVRyxTQUFTTyxJQUFuQjtBQUNBLHVCQUFPUCxTQUFTUSxNQUFULENBQWdCLFFBQWhCLEVBQTBCO0FBQy9CdkMsMkJBQVNELE1BQU1tQyxLQUFOLENBQVlsQyxPQURVO0FBRS9CQyx3QkFBTTJCLFFBQVEsQ0FBUixDQUZ5QjtBQUcvQjFCLHNCQUFJMEIsUUFBUSxDQUFSLENBSDJCO0FBSS9CekIsd0JBQU15QixRQUFRLENBQVIsQ0FKeUI7QUFLL0J4QiwyQkFBU3dCLFFBQVEsQ0FBUixDQUxzQjtBQU0vQnZCLDRCQUFVdUIsUUFBUSxDQUFSLENBTnFCO0FBTy9CdEIsaUNBQWVzQixRQUFRLENBQVIsQ0FQZ0I7QUFRL0JyQiw0QkFBVXFCLFFBQVEsQ0FBUixDQVJxQjtBQVMvQnBCLCtCQUFhb0IsUUFBUSxDQUFSO0FBVGtCLGlCQUExQixDQUFQOztBQVlGLG1CQUFLLENBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU9HLFNBQVNTLElBQVQsRUFBUDtBQXRCSjtBQXdCRDtBQUNGLFNBM0JNLEVBMkJKZCxPQTNCSSxFQTJCSyxJQTNCTCxDQUFQO0FBNEJELE9BOUIwQyxDQUFoQyxDQUFYOztBQWdDQSxlQUFTZSxlQUFULENBQXlCQyxFQUF6QixFQUE2QjtBQUMzQixlQUFPbEIsS0FBSy9CLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0Q7O0FBRUQsYUFBTytDLGVBQVA7QUFDRCxLQXRDTTtBQUZKLEdBQUQsQ0FsSUo7O0FBNktBLFNBQU9uRCxVQUFQO0FBQ0QsQ0F2TGdCLGtCQUFqQjs7a0JBeUxlQSxVIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICdiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yJztcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcic7XG5pbXBvcnQgX09iamVjdCRnZXRQcm90b3R5cGVPZiBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfanN4RmlsZU5hbWUgPSAnRDpcXFxccmVhY3RcXFxca2lja3N0YXJ0XFxcXFNobWFydFxcXFxwYWdlc1xcXFxyZWNvcmRzXFxcXHNob3cuanM/ZW50cnknO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IHsgQ2FyZCwgR3JpZCwgQnV0dG9uIH0gZnJvbSAnc2VtYW50aWMtdWktcmVhY3QnO1xuaW1wb3J0IHdlYjMgZnJvbSAnLi4vLi4vZXRoZXJldW0vd2ViMyc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAnLi4vLi4vcm91dGVzJztcbmltcG9ydCBSZWdpc3RlcmF0aW9uIGZyb20gJy4uLy4uL2V0aGVyZXVtL3JlZ2lzdGVyYXRpb24nO1xuLy9pbXBvcnQgQ29udHJpYnV0ZUZvcm0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Db250cmlidXRlRm9ybSc7XG5cblxudmFyIFJlY29yZFNob3cgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVjb3JkU2hvdywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVjb3JkU2hvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVjb3JkU2hvdyk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJlY29yZFNob3cuX19wcm90b19fIHx8IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YoUmVjb3JkU2hvdykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlY29yZFNob3csIFt7XG4gICAga2V5OiAncmVuZGVyUmVjb3JkcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclJlY29yZHMoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhZGRyZXNzID0gX3Byb3BzLmFkZHJlc3MsXG4gICAgICAgICAgbmFtZSA9IF9wcm9wcy5uYW1lLFxuICAgICAgICAgIGlkID0gX3Byb3BzLmlkLFxuICAgICAgICAgIHJvbGUgPSBfcHJvcHMucm9sZSxcbiAgICAgICAgICBvcmdUeXBlID0gX3Byb3BzLm9yZ1R5cGUsXG4gICAgICAgICAgcHJvdmlkZXIgPSBfcHJvcHMucHJvdmlkZXIsXG4gICAgICAgICAgd2FsbGV0QmFsYW5jZSA9IF9wcm9wcy53YWxsZXRCYWxhbmNlLFxuICAgICAgICAgIHdhbGxldElEID0gX3Byb3BzLndhbGxldElELFxuICAgICAgICAgIHNtYXJ0UmVjb3JkID0gX3Byb3BzLnNtYXJ0UmVjb3JkO1xuXG5cbiAgICAgIHZhciBpdGVtcyA9IFt7XG4gICAgICAgIGhlYWRlcjogYWRkcmVzcyxcbiAgICAgICAgbWV0YTogJ0FkZHJlc3Mgb2YgUmVjb3JkIGluIEJsb2NrY2hhaW4nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYW4gYWRkcmVzcyBvZiBSZWNvcmQgaW4gQmxvY2tjaGFpbicsXG4gICAgICAgIHN0eWxlOiB7IG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBuYW1lLFxuICAgICAgICBtZXRhOiAnTmFtZSBvZiBhIHBlcnNvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVGhpcyBpcyBhIG5hbWUgb2YgcmVnaXN0ZXIsIHdobyByZWNvcmQgaGlzL2hlciBpbmZvcm1hdGlvbiBpbnRvIHBvcnRhbCcsXG4gICAgICAgIHN0eWxlOiB7IG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBpZCxcbiAgICAgICAgbWV0YTogJ2lkIG9mIGEgcGVyc29uJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGFuIGlkIG9mIGEgcGVyc29uJyxcbiAgICAgICAgc3R5bGU6IHsgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcgfVxuICAgICAgfSwge1xuICAgICAgICBoZWFkZXI6IHJvbGUsXG4gICAgICAgIG1ldGE6ICdyb2xlIG9mIGEgcGVyc29uJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGFuIHJvbGUgb2YgYSBwZXJzb24nLFxuICAgICAgICBzdHlsZTogeyBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJyB9XG4gICAgICB9LCB7XG4gICAgICAgIGhlYWRlcjogb3JnVHlwZSxcbiAgICAgICAgbWV0YTogJ09yZ2FuaXphdGlvbiBUeXBlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdJdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCBPcmdhbml6YXRpb24gVHlwZScsXG4gICAgICAgIHN0eWxlOiB7IG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBwcm92aWRlcixcbiAgICAgICAgbWV0YTogJ3Byb3ZpZGVyJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdJdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCBwcm92aWRlcicsXG4gICAgICAgIHN0eWxlOiB7IG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBvcmdUeXBlLFxuICAgICAgICBtZXRhOiAnT3JnYW5pemF0aW9uIFR5cGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0l0IHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IE9yZ2FuaXphdGlvbiBUeXBlJyxcbiAgICAgICAgc3R5bGU6IHsgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcgfVxuICAgICAgfSwge1xuICAgICAgICBoZWFkZXI6IHdhbGxldEJhbGFuY2UsXG4gICAgICAgIG1ldGE6ICdXYWxsZXQgQmFsYW5jZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSXQgaXMgd2FsbGV0IGJhbGFuY2UuJyxcbiAgICAgICAgc3R5bGU6IHsgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcgfVxuICAgICAgfSwge1xuICAgICAgICBoZWFkZXI6IHNtYXJ0UmVjb3JkLFxuICAgICAgICBtZXRhOiAnU0hNQVJUIHJlY29yZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSW9UIERldmljZSBkYXRhJyxcbiAgICAgICAgc3R5bGU6IHsgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcgfVxuICAgICAgfV07XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQuR3JvdXAsIHsgaXRlbXM6IGl0ZW1zLCBfX3NvdXJjZToge1xuICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgbGluZU51bWJlcjogMTA4XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHJlbmRlciAoKXtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxoMz5SZWNvcmQgU2hvdzwvaDM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cblxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExheW91dCxcbiAgICAgICAge1xuICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogMTE5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoMycsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogMTIwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnUmVjb3JkIFNob3cnXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgR3JpZCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxMjFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBHcmlkLlJvdyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEyMlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgR3JpZC5Db2x1bW4sXG4gICAgICAgICAgICAgIHsgd2lkdGg6IDEwLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEyM1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJSZWNvcmRzKClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdyaWQuQ29sdW1uLCB7IHdpZHRoOiA2LCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTI0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHByb3BzKSB7XG4gICAgICAgIHZhciByZWNvcmQsIHN1bW1hcnk7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmVjb3JkID0gUmVnaXN0ZXJhdGlvbihwcm9wcy5xdWVyeS5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkLm1ldGhvZHMuZ2V0U3VtbWFyeSgpLmNhbGwoKTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgc3VtbWFyeSA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywge1xuICAgICAgICAgICAgICAgICAgYWRkcmVzczogcHJvcHMucXVlcnkuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHN1bW1hcnlbMF0sXG4gICAgICAgICAgICAgICAgICBpZDogc3VtbWFyeVsxXSxcbiAgICAgICAgICAgICAgICAgIHJvbGU6IHN1bW1hcnlbMl0sXG4gICAgICAgICAgICAgICAgICBvcmdUeXBlOiBzdW1tYXJ5WzNdLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHN1bW1hcnlbNF0sXG4gICAgICAgICAgICAgICAgICB3YWxsZXRCYWxhbmNlOiBzdW1tYXJ5WzVdLFxuICAgICAgICAgICAgICAgICAgd2FsbGV0SUQ6IHN1bW1hcnlbNl0sXG4gICAgICAgICAgICAgICAgICBzbWFydFJlY29yZDogc3VtbWFyeVs3XVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldEluaXRpYWxQcm9wcyhfeCkge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0SW5pdGlhbFByb3BzO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlY29yZFNob3c7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlY29yZFNob3c7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVjb3JkU2hvdyIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUmVjb3JkcyIsIl9wcm9wcyIsInByb3BzIiwiYWRkcmVzcyIsIm5hbWUiLCJpZCIsInJvbGUiLCJvcmdUeXBlIiwicHJvdmlkZXIiLCJ3YWxsZXRCYWxhbmNlIiwid2FsbGV0SUQiLCJzbWFydFJlY29yZCIsIml0ZW1zIiwiaGVhZGVyIiwibWV0YSIsImRlc2NyaXB0aW9uIiwic3R5bGUiLCJvdmVyZmxvd1dyYXAiLCJjcmVhdGVFbGVtZW50IiwiR3JvdXAiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwicmVjb3JkIiwic3VtbWFyeSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRTdW1tYXJ5IiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQU5BLElBQUlBLGVBQWUsNkRBQW5COztBQU9BOzs7QUFHQSxJQUFJQyxhQUFhLFVBQVVDLFVBQVYsRUFBc0I7QUFDckMsMEJBQVVELFVBQVYsRUFBc0JDLFVBQXRCOztBQUVBLFdBQVNELFVBQVQsR0FBc0I7QUFDcEIsa0NBQWdCLElBQWhCLEVBQXNCQSxVQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxXQUFXRSxTQUFYLElBQXdC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