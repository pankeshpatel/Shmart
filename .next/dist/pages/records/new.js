'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\react\\kickstart\\Shmart\\pages\\records\\new.js?entry';


var RecordNew = function (_Component) {
  (0, _inherits3.default)(RecordNew, _Component);

  function RecordNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, RecordNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RecordNew.__proto__ || (0, _getPrototypeOf2.default)(RecordNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      name: '',
      id: '',
      role: '',
      org_type: '',
      provider: '',
      wallet_balance: '',
      wallet_ID: '',
      shmart_record: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:

                event.preventDefault();

                _this.setState({
                  loading: true,
                  errorMessage: ''
                });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createRecord(_this.state.name, _this.state.id, _this.state.role, _this.state.org_type, _this.state.provider, _this.state.wallet_balance, _this.state.wallet_ID, _this.state.shmart_record).send({
                  from: accounts[0]
                });

              case 8:

                // This will redirect user to the home page, once the new 
                // instance of contract is published.
                _routes.Router.pushRoute('/');

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({
                  errorMessage: _context.t0.message
                });

              case 14:
                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  // This is the initial value. 
  // This is useful. Because onChangeHandler, we will 
  // call an event that capture the value, entered by the user.


  // This function will submit the user registeration
  // information to Blockchain network. 

  (0, _createClass3.default)(RecordNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, 'Create Record'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, 'Name'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'First Name and Last Name',
        value: this.state.name,
        onChange: function onChange(event) {
          return _this3.setState({
            name: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, 'ID'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Government ID / Verified ID Number',
        value: this.state.id,
        onChange: function onChange(event) {
          return _this3.setState({
            id: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, 'Role'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Role',
        value: this.state.role,
        onChange: function onChange(event) {
          return _this3.setState({
            role: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 116
        }
      }, 'Organization Type'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Your Organization Type',
        value: this.state.org_type,
        onChange: function onChange(event) {
          return _this3.setState({
            org_type: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 117
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 129
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 130
        }
      }, 'Provider'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Provider Information',
        value: this.state.provider,
        onChange: function onChange(event) {
          return _this3.setState({
            provider: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 131
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 144
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 145
        }
      }, 'Wallet Balance'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Wallet Balance (in USD)',
        value: this.state.wallet_balance,
        onChange: function onChange(event) {
          return _this3.setState({
            wallet_balance: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 146
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 159
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 160
        }
      }, 'Wallet ID'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Wallet ID',
        value: this.state.wallet_ID,
        onChange: function onChange(event) {
          return _this3.setState({
            wallet_ID: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 161
        }
      })), _react2.default.createElement(_semanticUiReact.Form.TextArea, {
        label: 'SHMART Record',
        placeholder: 'Enter SHMART Record Link',
        value: this.state.shmart_record,
        onChange: function onChange(event) {
          return _this3.setState({
            shmart_record: event.target.value
          });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      }), _react2.default.createElement(_semanticUiReact.Message, {
        error: true, header: 'Oops!',
        content: this.state.errorMessage,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 184
        }
      }), _react2.default.createElement(_semanticUiReact.Button, {
        loading: this.state.loading, primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 189
        }
      }, 'Register Record!')));
    }
  }]);

  return RecordNew;
}(_react.Component);

exports.default = RecordNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,